<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Google Sites News"     
    scrolling="true">
  </ModulePrefs>
  <UserPref name="rss_url" display_name="RSS URL" required="true"/>
  <UserPref name="bg" display_name="Background Color" required="true" default_value="#f9f9f9"/>
  <UserPref name="item_num" display_name="The number of items to show" required="true" default_value="2"/>
  <UserPref name="max_chars" display_name="The maximum number of characters to show (0 to show only the title)" required="true" default_value="100"/>
  <UserPref name="img_size" display_name="Thumbnail picture size" required="true" default_value="100"/>
  <UserPref name="read_more" display_name="Text for the read more button" required="true" default_value="Read More..."/>
   <Content type="html"><![CDATA[
   <html>
	<head>
		<style>
			@import url(https://fonts.googleapis.com/css?family=Open+Sans);
			#slideshow {
			  font-family: 'Open Sans';
			  font-weight: 400;
			  font-size: 10pt;
			}
			h1, h2, h3, h4, h5, h6 {
				font-family: "Trebuchet MS", Helvetica, sans-serif;
				color: #005596;
			}
			#slider_inner {
				padding: 0;
			}
			#slider a {
				color: #d10000;
				text-decoration: none;
			}
			#slider a:hover {
				text-decoration: underline;
			}
			#slider a:visited {
				color: #8b0000;
			}
			#slider ul {
				margin: 0;
				padding: 0;					
			}
			#slider ul li {
				display: block;				
				margin-top: 0;
				margin-bottom: 5px;
				margin-right: 0;
				margin-left: 0;
				padding: 0;				
				list-style: none;
				background-color: #ffffff;
				/*-webkit-border-radius: 5px;
				-moz-border-radius: 5px;
				-o-border-radius: 5px;
				border-radius: 5px;*/
				border: 1px solid rgb(202,202,202);
				border-bottom: 2px solid rgb(202,202,202);
				/*-webkit-box-shadow: 2px 2px 2px gray;
				-moz-box-shadow: 2px 2px 2px gray;
				-o-box-shadow: 2px 2px 2px gray;
				box-shadow: 2px 2px 2px gray;	*/			
				position: relative;				
				overflow: hidden;
			}
			#slider ul li div {
				padding: 10px;
				height: 100px;
			}
			.imgPreview {
				position: absolute;
				left: 50%;
				top: 50%;			
				width: 100%;
				height: auto;
				-webkit-transform: translate(-50%,-50%);
				-ms-transform: translate(-50%,-50%);
				-o-transform: translate(-50%,-50%);
				transform: translate(-50%,-50%);
			}
			.thumbnail {
				position: relative;
				overflow: hidden;
				float: left;
				padding: 2px;
				border: 1px solid #cacaca;
				border-bottom: 2px solid #cacaca;
				margin-right: 10px;
			}
			#more {
				float: right;
				font-family: 'Open Sans';
			  	font-weight: 400;
				font-size: 10pt;
				font-weight: bold;
			}
		</style>
	</head>
	<body>	
		<div id="slideshow">			
			<div id="slider">				
				<div id="slider_inner">Loading...
				</div>
			</div>
		</div>
	</body>
	<script type="text/javascript">		
		//The number of items to show
		var itemNum = 3;
		//The number of characters to show
		var maxChars = 100;
		//The default background color
		var bg = '#f9f9f9';
		//The read more button text
		var readMore = 'Read More...';
		//The picture size
		var imgSize = 100;
		
		function getHtml() {
			//Get the user preferences
			var prefs = new gadgets.Prefs();
			//The url with the rss
			var url = prefs.getString("rss_url");
			bg = prefs.getString("bg");
			itemNum = prefs.getInt("item_num");		  
			maxChars = prefs.getInt("max_chars");
			readMore = prefs.getString("read_more");
			picSize = prefs.getInt("img_size");
			
			//Params to set the request
			var params = {};  		  
			params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.FEED;
			params[gadgets.io.RequestParameters.NUM_ENTRIES] = new Number(itemNum);  
			params[gadgets.io.RequestParameters.GET_SUMMARIES] = true;   
				
			gadgets.io.makeRequest(url, makeSlides, params);
		};
			
		function makeSlides(obj) {
			// obj.data contains the feed data
			var feed = obj.data;
			
			//If the data is not empty
			if (feed.Entry) {
				//Create a CSS object with the background color
				var css = 'body {background-color: ' + bg + ';}\n';				
				appendCSS(css);
				
				//Variable to put the slides into
				var slides = '';		
				
				//Loop through the feed entries
				for(var i=0; i < feed.Entry.length; i++){
					//The id of the slide
					var id = (i+1).toString();
					
					//Create a slide with the feed contents
					var slide = '<h3><a href="' + feed.Entry[i].Link + '" target="_top" title="Read more about ' + feed.Entry[i].Title + '">' + feed.Entry[i].Title + '</a></h3>';
					//Show the image and the intro text only if the number of characters to show is greater than 0
					if(maxChars > 0) {
						slide += '<p>' + getImg(feed.Entry[i].Summary) + getIntro(feed.Entry[i].Summary) + '</p>';
					}						
					slides += '<li><div id="slide' + id + '">' + slide + '</div></li>';					
				}
				var parentLink = feed.Entry[0].Link;
				parentLink = parentLink.substring(0, parentLink.lastIndexOf("/"));
				var more = '<a href="' + parentLink + '" target="_top" title="More about">' + readMore + '</a>';
				document.getElementById('slider_inner').innerHTML = '<ul>' + slides + '</ul><div id="more">' + more + '</div>'; 				
			}
		}
		
		function appendCSS(css) {
			var elem = document.createElement('style');
			elem.type = 'text/css';	
			elem.appendChild(document.createTextNode(css));
			document.getElementsByTagName("head")[0].appendChild(elem);
		}

		function makeVendors(css) {
			var vendors = ['-webkit-', '-moz-', '-o-', ''];
			var res = '';
			
			for(var i=0; i < vendors.length; i++){
				res += css.replace(/__VENDORS__/g, vendors[i]);
			}
			
			return res;
		}

		function getIntro(cont) {
		  //var newLine = cont.replace(/(\n|\r|\n\r|\r\n)/ig, '|n|');
		  var newLine = cont.replace(/(\n|\r|\n\r|\r\n)/ig, '');
		  var endPos = newLine.search(/(<hr\/>|<hr>)/);
		  var regex = /(<([^>]+)>)/ig;
			
		  if(endPos > 0) {    
			var intro = newLine.slice(0, endPos);    
			var res = intro.replace(regex, ''); 
			//res = res.replace(/[|n|]+/g, '<br>');
		  } else {
			var res = newLine.replace(regex, ''); 
			//res = res.replace(/[|n|]+/g, '<br>');
		  }
		  
		  if(res.length > maxChars) {
			res = res.substring(0, maxChars);
			res = res.substring(0, res.lastIndexOf(" ")) + '...';
		  }
		  
		  return res;
		}

		function getImg(cont) {
		  // Retrieve the first image source from the content of the page
		  // Use regexp to get the first image tag
		  var imgRegexp = /<img.*?\/>/;
		  var img1 = imgRegexp.exec(cont);
		  
		  if(img1 != null) {
			  // Use regexp to get the source of the previously retrieved image tag
			  var srcRegexp = /src=\S+[^>]/;
			  // Re-make the image tag to assure empty style
			  //var imgPrev = '<div style="width:'+imgSize+'px;height:'+imgSize+'px;" class="thumbnail"><img ' + srcRegexp.exec(img1) + ' class="imgPreview" /></div>';
			  
			  // Return the image
			  return imgPrev;
		  } else {
			return '';
			  }
		}
		
		//Load the html	
		gadgets.util.registerOnLoadHandler(getHtml);
	</script>
	</html>
	]]>
  </Content>
</Module>
