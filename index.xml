<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Google Sites News"     
    scrolling="true">
  </ModulePrefs>
  <UserPref name="rss_url" display_name="RSS URL" required="true"/>
  <UserPref name="bg" display_name="Background Color" required="true" default_value="#f9f9f9"/>
  <UserPref name="time" display_name="Transitions length (in seconds)" required="true" default_value="4"/>
  <UserPref name="width" display_name="Slider Width" required="true" default_value="350"/>
  <UserPref name="height" display_name="Slider Height" required="true" default_value="200"/>
  <UserPref name="max_chars" display_name="Maximum Characters to Show" required="true" default_value="100"/>
   <Content type="html"><![CDATA[<html>
	<head>	
		<link rel="stylesheet" type="text/css" href="https://raw.githubusercontent.com/pablosar/gsitesnews/master/basic.css">		
	</head>
	<body>
		<span id="query_play"></span>
		<span id="query_pause"></span>
		<div id="out_queries"></div>		
		
		<div id="slideshow">
			<div id="out_ctrls"></div>	
			
			<a href="#query_play" title="Play" id="play">&#9658;</a>
			<a href="#query_pause" title="Pause" id="pause">II</a>
			
			<div id="slider">
				<div id="slider_anim">Loading...
				</div>
				<div id="slider_inner">
				</div>
			</div>
			
			<div id="pages">
				<div id="mark"></div>
				<div id="out_pages"></div>
			</div>
		</div>
	</body>
	<script type="text/javascript">		
		var w = 350;
		var h = 200;
		var t = 4;
		var bg = '#f9f9f9';
		var maxChars = 100;
		
		function getHtml() {
		  var prefs = new gadgets.Prefs();
		  var url = prefs.getString("rss_url");
		  bg = prefs.getString("bg");
		  t = prefs.getInt("time");
		  w = prefs.getInt("width");
		  h = prefs.getInt("height");
		  maxChars = prefs.getInt("max_chars");
		  var params = {};  		  
		  params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.FEED;
		  params[gadgets.io.RequestParameters.NUM_ENTRIES] = new Number(10);  
		  params[gadgets.io.RequestParameters.GET_SUMMARIES] = true;   
		    
		  gadgets.io.makeRequest(url, makeSlides, params);
		};
			
		function makeSlides(obj) {
			// obj.data contains the feed data
			var feed = obj.data;
			
			if (feed.Entry) {
				makeCSS(feed.Entry.length);
				
				var slides = '';
				var pages = '';
				var ctrls = '';
				var queries = '';
				var queriesCSS = '';
				var markerKf = '';
				var sliderKf = '';			
				// The percentage for each key frame
				var perKf = 100 / feed.Entry.length;
				//The percentage for each transition between keyframes (two percent of the keyframe)
				var perTrans = perKf * 0.8;
				//The starting position for the marker
				var markStart = (w - (16 * feed.Entry.length) + 6) / 2;
				//The percentage for each transition of the marker
				var markTrans = (Math.round(perKf * 0.2 / 3) * 100) / 100;
				
				for(var i=0; i < feed.Entry.length; i++){
					var id = (i+1).toString();
					var prev = '1';
					var next = '1';
					
					var slide = '<h3><a href="' + feed.Entry[i].Link + '" target="_top" title="Read more about ' + feed.Entry[i].Title + '">' + feed.Entry[i].Title + '</a></h3>';
					slide += '<p>' + getImg(feed.Entry[i].Summary) + getIntro(feed.Entry[i].Summary) + '</p>';
					slides += '<li><div id="slide' + id + '">' + slide + '</div></li>';
					
					pages += '<li><a href="#query_' + id + '" id="page' + id + '" title="Go to the slide ' + id + '">&nbsp;</a></li>';
					
					if(i <= 0) {
						prev = feed.Entry.length.toString();
						next = (i+2).toString();
						
						var thisPerTrans = Math.round(perTrans * 100) / 100;
						sliderKf += '0%, ' + thisPerTrans.toString() + '%, 100% {left: 0px;}\n';					
											
						markerKf += '0%, 100% {left: ' + markStart + 'px; opacity: 1;}\n';					
						markerKf += thisPerTrans.toString() + '% {left: ' + markStart + 'px; opacity: 1;}\n';					
						markerKf += (thisPerTrans + markTrans).toString() + '% {left: ' + markStart + 'px; opacity: 0;}\n';

						queriesCSS += '#query_' + id + ':target ~ #slideshow #slider #slider_inner {display: block; left: 0px;}\n';
					} else if((i+1) >= feed.Entry.length) {
						prev = i.toString();
						next = '1';		
						
						var thisPerKf = Math.round(perKf * i * 100) / 100;
						var thisPerTrans = Math.round((thisPerKf + perTrans) * 100) / 100;
						sliderKf += thisPerKf.toString() + '% {left: -' + (i * 100).toString() + '%;}\n';
						sliderKf += thisPerTrans.toString() + '% {left: -' + (i * 100).toString() + '%;}\n';
						
						var markPos = markStart + (16 * i);
						markerKf += (thisPerKf - markTrans).toString() + '% {left: ' + markPos + 'px; opacity: 0;}\n';
						markerKf += thisPerKf.toString() + '% {left: ' + markPos + 'px; opacity: 1;}\n';
						markerKf += thisPerTrans.toString() + '% {left: ' + markPos + 'px; opacity: 1;}\n';
						markerKf += (thisPerTrans + markTrans).toString() + '% {left: ' + markPos + 'px; opacity: 0;}\n';
						markerKf += (thisPerTrans + (markTrans * 2)).toString() + '% {left: ' + markStart + 'px; opacity: 0;}\n';
						
						queriesCSS += '#query_' + id + ':target ~ #slideshow #slider #slider_inner {display: block; left: -' + (i * 100).toString() + '%;}\n';
					} else {
						prev = i.toString();
						next = (i+2).toString();
						
						var thisPerKf = Math.round(perKf * i * 100) / 100;
						var thisPerTrans = Math.round((thisPerKf + perTrans) * 100) / 100;
						sliderKf += thisPerKf.toString() + '% {left: -' + (i * 100).toString() + '%;}\n';
						sliderKf += thisPerTrans.toString() + '% {left: -' + (i * 100).toString() + '%;}\n';
						
						var markPos = markStart + (16 * i);
						markerKf += (thisPerKf - markTrans).toString() + '% {left: ' + markPos + 'px; opacity: 0;}\n';
						markerKf += thisPerKf.toString() + '% {left: ' + markPos + 'px; opacity: 1;}\n';
						markerKf += thisPerTrans.toString() + '% {left: ' + markPos + 'px; opacity: 1;}\n';
						markerKf += (thisPerTrans + markTrans).toString() + '% {left: ' + markPos + 'px; opacity: 0;}\n';
						
						queriesCSS += '#query_' + id + ':target ~ #slideshow #slider #slider_inner {display: block; left: -' + (i * 100).toString() + '%;}\n';
					}
					
					ctrls += '<a href="#query_' + prev + '" title="Go to the slide ' + prev + '" class="prev" id="prev' + id + '">&lt;</a>';
					ctrls += '<a href="#query_' + next + '" title="Go to the slide ' + next + '" class="next" id="next' + id + '">&gt;</a>';
					
					queries += '<span id="query_' + id + '" class="queries"></span>';
					queriesCSS += '#query_' + id + ':target ~ #slideshow #play {display: block;}\n';
					queriesCSS += '#query_' + id + ':target ~ #slideshow #pause {display: none;}\n';
					queriesCSS += '#query_' + id + ':target ~ #slideshow #pages #mark {display: none;}\n';
					queriesCSS += '#query_' + id + ':target ~ #slideshow #slider #slider_anim {display: none;}\n';
					queriesCSS += '#query_' + id + ':target ~ #slideshow #pages #page' + id + ' {background-color: #9f0000;}\n';
					queriesCSS += '#query_' + id + ':target ~ #slideshow #prev' + id + ',  #query_' + id + ':target ~ #slideshow #next' + id + ' {display: block;}\n';
					
				}
				
				var css = makeVendors('@__VENDORS__keyframes slider {' + sliderKf + '}\n@__VENDORS__keyframes marker {' + markerKf + '}\n');
				appendCSS(css + queriesCSS);
				
				document.getElementById('slider_anim').innerHTML = '<ul>' + slides + '</ul>'; 
				document.getElementById('slider_inner').innerHTML = '<ul>' + slides + '</ul>'; 
				document.getElementById('out_pages').outerHTML = '<ul>' + pages + '</ul>'; 			
				document.getElementById('out_ctrls').outerHTML = ctrls; 			
				document.getElementById('out_queries').outerHTML = queries; 	
			}
		}
		
		function makeCSS(objsNum) {
			var dur = (t * objsNum).toString();
			var css = 'body {background-color: ' + bg + ';}\n';
			css += '#slideshow {width: ' + (w + 40).toString() + 'px;}\n';
			css += '#slider {width: ' + w.toString() + 'px; height: ' + h.toString() + 'px;}\n';
			css += '#slider ul {width: ' + (objsNum * 100).toString() + '%;}\n';
			css += '#slider ul li {width: ' + w.toString() + 'px; height: ' + h.toString() + 'px;}\n';
			css += '#slider_anim {-webkit-animation: slider ' + dur + 's infinite; -moz-animation: slider ' + dur + 's infinite; -o-animation: slider ' + dur + 's infinite; animation: slider ' + dur + 's infinite;}\n';
			css += '#mark {left: 0px;	-webkit-animation: marker ' + dur + 's infinite; -moz-animation: marker ' + dur + 's infinite; -o-animation: marker ' + dur + 's infinite; animation: marker ' + dur + 's infinite;}\n';
			css += '#pages {width: ' + w.toString() + 'px;}\n';
			css += '#slider_playback {width: ' + w.toString() + 'px; height: ' + h.toString() + 'px;}\n';
			css += '#slideshow #play, #slideshow #pause {left: ' + ((w - 50) / 2).toString()  + 'px; top: ' + ((h - 50) / 2).toString()  + 'px;}\n';
			css += '.prev, .next {top: ' + ((h - 40) / 2).toString() + 'px;}\n';
			css += '.next {left: ' + (w + 10).toString() + 'px;}\n';
			
			appendCSS(css);
		}		
		
		function appendCSS(css) {
			var elem = document.createElement('style');
			elem.type = 'text/css';	
			elem.appendChild(document.createTextNode(css));
			document.getElementsByTagName("head")[0].appendChild(elem);
		}
		
		function makeVendors(css) {
			var vendors = ['-webkit-', '-moz-', '-o-', ''];
			var res = '';
			
			for(var i=0; i < vendors.length; i++){
				res += css.replace(/__VENDORS__/g, vendors[i]);
			}
			
			return res;
		}
		
		function getIntro(cont) {
		  var newLine = cont.replace(/(\n|\r|\n\r|\r\n)/ig, '|n|');
		  var endPos = newLine.search(/(<hr\/>|<hr>)/);
		  var regex = /(<([^>]+)>)/ig;
		    
		  if(endPos > 0) {    
		    var intro = newLine.slice(0, endPos);    
		    var res = intro.replace(regex, ''); 
		    res = res.replace('|n|', '<br>');
		  } else {
		    var res = newLine.replace(regex, ''); 
		    res = res.replace('|n|', '<br>');
		  }
		  
		  if(res.length > maxChars) {
		  	res = res.substring(0, maxChars);
		  	res = res.substring(0, res.lastIndexOf(" ")) + '...';
		  }
		  
		  return res;
		}
		
		function getImg(cont) {
		  // Retrieve the first image source from the content of the page
		  // Use regexp to get the first image tag
		  var imgRegexp = /<img.*?\/>/;
		  var img1 = imgRegexp.exec(cont);
		  
		  if(img1 != null) {
			  // Use regexp to get the source of the previously retrieved image tag
			  var srcRegexp = /src=\S+[^>]/;
			  // Re-make the image tag to assure empty style
			  var imgPrev = '<img ' + srcRegexp.exec(img1) + ' class="imgPreview" />';
			  
			  // Return the image
			  return imgPrev;
		  } else {
		  	return '';
	  	  }
		}
		
		gadgets.util.registerOnLoadHandler(getHtml);
	</script>
</html>]]>
  </Content>
</Module>
