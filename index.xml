<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Google Sites News"     
    scrolling="true">
	<Require feature="dynamic-height"/>
  </ModulePrefs>
  <UserPref name="rss_url" display_name="RSS URL" required="true"/>
  <UserPref name="custom_css" display_name="Custom Stylesheet" default_value="https://sites.google.com/a/edu.haifa.ac.il/ejsafra/default.css"/>  
  <UserPref name="interval" display_name="Transitions length (in milliseconds)" required="true" default_value="5000"/>
  <UserPref name="width" display_name="Slider Width (leave empty for 100%)" required="false" default_value=""/>
  <UserPref name="height" display_name="Slider Minimal Height" required="true" default_value="200"/>
  <UserPref name="item_num" display_name="The number of items to show" required="true" default_value="3"/>
  <UserPref name="max_chars" display_name="Maximum Characters to Show" required="true" default_value="100"/>
  <UserPref name="img_cover" display_name="Use Picture as Cover" datatype="bool" default_value="false"/>
  <UserPref name="img_size" display_name="Picture Preview Size" required="true" default_value="100"/>  
  <UserPref name="aa_height" display_name="Auto-adjust height" datatype="bool" default_value="false"/>
  <UserPref name="no_cache" display_name="Cache Size (in seconds)" required="true" default_value="60"/>
   <Content type="html"><![CDATA[<html>
	<head>			
		<style>
			#slideshow {
				position: relative; 
				overflow: hidden;
				width: 100%;
				min-height: 134px;
				height: auto;				
				padding: 5px;
				box-sizing: border-box;
			}
			#slider_inner {
				position: relative;
				overflow: hidden;
				min-height: 100px;
				height: auto;
				box-sizing: border-box;
			}
			#slider_inner:hover ~ #prev, #slider_inner:hover ~ #next {
				display: inline-block;
			}
			.slide {
				position: absolute;
				display: inline-block;
				padding: 0px;
				top:0px;
				left:0px;
				opacity: 0;	
				width: 100%;
				height: auto;				
				-webkit-transition: opacity 0.6s ease-in-out;
				-moz-transition: opacity 0.6s ease-in-out;
				-o-transition: opacity 0.6s ease-in-out;
				transition: opacity 0.6s ease-in-out;	
			}
			.innerSlide {
				padding: 10px;
			}
			#prev, #next {
				position: absolute;
				display: none;
				top: 40px;				
				width: 25px;
				height: 30px;								
				text-align: center;				
				cursor: pointer;
				-webkit-transition: all 0.1s ease-in-out;
				-moz-transition: all 0.1s ease-in-out;
				-o-transition: all 0.1s ease-in-out;
				transition: all 0.1s ease-in-out;	
			}
			#prev {				
				left: 0px;
				border-radius: 0px 3px 3px 0px;
				background: #000000; /* For browsers that do not support gradients */
				background: -webkit-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* For Safari 5.1 to 6.0 */
				background: -o-linear-gradient(right, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* For Opera 11.1 to 12.0 */
				background: -moz-linear-gradient(right, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* For Firefox 3.6 to 15 */
				background: linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* Standard syntax */			
				z-index: 999997;
			}
			#prev span {
				display: inline-block;
				margin-top: 5px;
				margin-bottom: 5px;
				width: 0px;
				height: 0px;				
				border-top: 10px solid transparent;
				border-bottom: 10px solid transparent;
				border-right: 10px solid rgba(255, 255, 255, 0.95);
			}
			#next {				
				right: 0px;
				border-radius: 3px 0px 0px 3px;
				background: #000000; /* For browsers that do not support gradients */
				background: -webkit-linear-gradient(right, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* For Safari 5.1 to 6.0 */
				background: -o-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* For Opera 11.1 to 12.0 */
				background: -moz-linear-gradient(left, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* For Firefox 3.6 to 15 */
				background: linear-gradient(to left, rgba(0,0,0,0), rgba(0,0,0,0.25)); /* Standard syntax */
				z-index: 999998;
			}
			#next span {
				display: inline-block;
				margin-top: 5px;
				margin-bottom: 5px;
				width: 0px;
				height: 0px;				
				border-top: 10px solid transparent;
				border-bottom: 10px solid transparent;
				border-left: 10px solid rgba(255, 255, 255, 0.95);
			}
			#prev:hover, #next:hover {
				display: inline-block;
				margin-top: -1px;
				box-shadow: 1px 1px 3px #000000;
			}
			#prev:active, #next:active {
				margin-top: 0px;
				box-shadow: 2px 2px 3px #000000 inset;
			}
			#idxs {
				position: relative;
				text-align: right;
				margin-top: 7px;
			}
			#idxs div {
				position: relative;
				display: inline-block;								
				box-shadow: 2px 2px 4px #808080 inset;
				color: gray;
				cursor: pointer;
				border-radius: 50%;
				margin-left: 5px;
				-webkit-transition: all 0.6s ease-in-out;
				-moz-transition: all 0.6s ease-in-out;
				-o-transition: all 0.6s ease-in-out;
				transition: all 0.6s ease-in-out;
			}
			#playback {
				position: absolute;
				display: inline-block;
				top: 25px;
				right: 0px;				
				width: 0px;
				height: 0px;				
				border-radius: 5px;
				text-align: center;				
				cursor: default;
				z-index: 999999;
				opacity: 0;
				-webkit-transition: all 0.4s ease-in-out;
				-moz-transition: all 0.4s ease-in-out;
				-o-transition: all 0.4s ease-in-out;
				transition: all 0.4s ease-in-out;				
			}
			#playback span {
				display: inline-block;
				margin-top: 25%;
				margin-bottom: 25%;
				margin-right: 10%;
				margin-left: 10%;
				width: 20%;
				height: 50%;
				background-color: #FFFFFF;
			}
		</style>
	</head>
	<body>
		<div id="slideshow">
			<div id="slider">
				<div id="playback" onmouseover="playback(false);" onmouseout="playback(true);" title="Paused">
					<span></span><span></span>
				</div>				
				<div id="slider_inner" tabindex="1" onkeydown="goSlideKey(event);" onmouseover="this.focus();playback(false);" onmouseout="this.blur();playback(true);" title="Paused "ontouchstart="startSwipe(event)" ontouchend="endSwipe(event)" ontouchmove="startSwipe(event, 'X', 'Y')" ontouchcancel="cancelSwipe()">Loading...
				</div>
				<div id="prev" onclick="goSlide(-1);" title="Go to the previous slide">
					<span></span>
				</div>
				<div id="next" onclick="goSlide(1);" title="Go to the next slide">
					<span></span>
				</div>
				<div id="idxs"></div>
			</div>
		</div>
	</body>
	<script type="text/javascript">
		//The interval of time between slides
		var interval = 5000;
		//The width and the height of the slider
		var slideWidth = "100%";
		var slideHeight = 200;
		//The maximum number of characters to retrieve from each rss page
		var maxChars = 100;		
		//The size of the image in the slide
		var imgSize = 100;
		//The cache size
		var nocache = 60;
		//The url for a customized css
		var customCss = 'default.css';
		//Auto-adjust height
		var aaHeight = false;
		//The number of items to show
		var itemNum = 3;
		//Use the first image as a cover for the slide
		var imgCover = false;
		//Swiping properties for smartphones/tablets
		var swipe = {
			'startX': 0,
			'startY': 0,
			'X': 0,
			'Y': 0,
			'fingers': 0
		};
		//The mininmum length of the swipe
		var swipeMinLength = 72;
		
		function getHtml() {
			//Get the user preferences
			var prefs = new gadgets.Prefs();
			//The url to retrieve the rss pages
			var url = prefs.getString("rss_url");
		  
			interval = prefs.getInt("interval");
			slideWidth = prefs.getInt("width");
			slideHeight = prefs.getInt("height");
			maxChars = prefs.getInt("max_chars");
			imgSize = prefs.getInt("img_size");
			nocache = prefs.getInt("no_cache");
			customCss = prefs.getString("custom_css");
			itemNum = prefs.getInt("item_num");
			aaHeight = prefs.getBool("aa_height");
			imgCover = prefs.getBool("img_cover");
		  
			//Append the custom css to the html
			if(customCss != '') {
				appendCSSFile(customCss);
			}
		  
			//The parameters for the request
			var params = {};  		  
			params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.FEED;
			params[gadgets.io.RequestParameters.NUM_ENTRIES] = new Number(itemNum);  
			params[gadgets.io.RequestParameters.GET_SUMMARIES] = true;   
		    
			//Make a cached request for the rss data and then call the function addSlides to parse it
			makeCachedRequest(url, addSlides, params, nocache);
		};
		
		function makeCachedRequest(url, callback, params, refreshInterval) {
			//Make a cached request
			//Get the current time
			var ts = new Date().getTime();
			var sep = "?";
			
			//Calculate the expiration time for the cached response
			if (refreshInterval && refreshInterval > 0) {
				ts = Math.floor(ts / (refreshInterval * 1000));
			}
			
			//Add the extra parameters for the cached request as querystrings to the rss url
			if (url.indexOf("?") > -1) {
				sep = "&";
			}
			url = [ url, sep, "nocache=", ts, "&max-results=", itemNum ].join("");
			
			//Make the request and call the callback function
			gadgets.io.makeRequest(url, callback, params);
		}
		
		function addSlides(obj) {
			//The callback function to parse the rss data into slides
			// obj.data contains the feed data
			var feed = obj.data;
					
			//Adjust the slider size according to the user preferences
			if(slideWidth == "" || slideWidth == 0) {
				//Adjust the width to 100%
				document.getElementById('slideshow').style.width = "100%";				
			} else {
				//Adjust the width to the selected pixels
				document.getElementById('slideshow').style.width = slideWidth + 5;					
				//Adjust the width of the inner part of the slider
				document.getElementById('slider_inner').style.width = slideWidth;				
			}
					
			//Get the element where to put the data
			var sliderObj = document.getElementById('slider_inner');
			//Get the element where to put the pagination indexes (the links to each slide)
			var idxObj = document.getElementById('idxs');
			
			//Clear the data in the slider
			sliderObj.innerHTML = '';
			
			//Set the maximum number of slideshow
			window.itemNum = feed.Entry.length;
			
			//Template for the slide					
			if(imgCover == true){
				//Use the image as cover (on the background)
				var template = '<div id="slide#_ID" style="z-index:#_ZINDEX;#_IMAGE" class="slide"><div class="innerSlide">';
				template += '<div class="slideTitle"><h3><a href="#_LINK" target="_top" title="Read more about #_TITLE">#_TITLE</a></h3></div>';				
				template += '<div class="slideText"><p>#_TEXT</p></div></div></div>';
				
				var imgTemplate = 'background: url(#_IMAGE) no-repeat center center; background-size: cover';
			} else {
				var template = '<div id="slide#_ID" style="z-index:#_ZINDEX;" class="slide"><div class="innerSlide"><table width="100%">';
				template += '<tr><td colspan="2"><div class="slideTitle"><h3><a href="#_LINK" target="_top" title="Read more about #_TITLE">#_TITLE</a></h3></div></td></tr>';				
				template += '<tr><td style="width:1%;white-space:no-wrap;">#_IMAGE</td>';
				template += '<td><div class="slideText"><p>#_TEXT</p></div></td></tr></table></div></div>';
				
				var imgTemplate = '<div style="width:'+imgSize+'px;height:'+imgSize+'px;background: url(#_IMAGE) no-repeat center center; background-size: cover;" class="thumbnail" title="#_TITLE"></div>';
			}	
			
			//Get the maximum height
			maxHeight = slideHeight;
			
			//Put the data into the slider
			for(var i = 0; i < feed.Entry.length; i++) {
				var idStr = (i + 1).toString();		
				var imgSrc = getImg(feed.Entry[i].Summary);
				//Put the id to the slide
				var slide = template.replace(/#_ID/g, idStr);
				//Add the z-index
				slide = slide.replace(/#_ZINDEX/g, (feed.Entry.length - i).toString());
				//Put the link in the slide				
				slide = slide.replace(/#_LINK/g, feed.Entry[i].Link);
				//Put the title in the slide
				slide = slide.replace(/#_TITLE/g, feed.Entry[i].Title);
				//Put the text in the slide
				slide = slide.replace(/#_TEXT/g, getIntro(feed.Entry[i].Summary));
				//Put the image
				if(imgSrc != '') {
					var img = imgTemplate.replace(/#_IMAGE/, imgSrc);
					img = img.replace(/#_TITLE/g, feed.Entry[i].Title);
					slide = slide.replace(/#_IMAGE/, img);
				} else {
					slide = slide.replace(/#_IMAGE/, '');
				}
				
				sliderObj.innerHTML += slide;
				idxObj.innerHTML += '<div id="idx' + idStr + '" onclick="goSlide(' + idStr + ', true)" title="' + feed.Entry[i].Title + '">&nbsp;</div>';
				
				//Calculate the height of each slide and get the maximum one
				var thisHeight = document.getElementById('slide' + idStr).clientHeight;
				
				if(thisHeight > maxHeight) {
					maxHeight = thisHeight;
				}				
				
				/*console.log('This height '+idStr+':' + thisHeight);
				console.log('This scroll height '+idStr+':' +  document.getElementById('slide' + idStr).scrollHeight);
				console.log('This offset height '+idStr+':' +  document.getElementById('slide' + idStr).offsetHeight);
				console.log('Max height (clientHeight): ' + maxHeight);*/
			}
			
			//Adjust the height of the slider and controls
			document.getElementById('slideshow').style.minHeight = slideHeight + 27;
			document.getElementById('slider_inner').style.minHeight = slideHeight;
			//Set the height of the inner slider to the slide with the maximum height
			document.getElementById('slider_inner').style.height = maxHeight;
			//Adjust the position of the previous and next buttons
			document.getElementById('next').style.top = (maxHeight-30)/2;
			document.getElementById('prev').style.top = (maxHeight-30)/2;	
			
			//Auto-adjust the height of the iframe container
			if(aaHeight) {
				gadgets.window.adjustHeight();					
			}
			
			//Start the slider
			startSlider();
		}
			
		function startSlider() {
			//Start to play the slider
			//Show the first slide
			document.getElementById('slide1').style.opacity = 1;
			document.getElementById('idx1').style.background = 'rgba(1, 87, 155, 0.65)';
			document.getElementById('idx1').style.boxShadow = '0px 0px 3px rgba(1, 87, 155, 0.65)';
			
			//Set the counter
			window.counter = 1;
			
			//Set the interval to start the playback
			window.timer = setInterval(playSlide, window.interval);			
		}
			
		function playSlide(idx) {
			//Function activated in intervals, show a slide
			//Get the index - the number of slides to jump forward or backwards
			idx = typeof idx !== 'undefined' ? idx : 1;
			
			//Get the slide previously shown
			var prev = window.counter;
			
			//Set the counter to jump to the new slide
			window.counter += idx;
			
			//Check if the previous was the last slide
			if(window.counter > window.itemNum) {
				//If so set the first slide as the next slide to show
				window.counter = 1;
				prev = window.itemNum;
			} else if(window.counter < 1) {
				//If the slider is being played backwards
				window.counter = window.itemNum;
				prev = 1;
			}
			
			//Hide the previous slide
			document.getElementById('slide' + prev.toString()).style.opacity = 0;
			document.getElementById('slide' + prev.toString()).style.zIndex = prev;			
			document.getElementById('idx' + prev.toString()).style.background = '';			
			document.getElementById('idx' + prev.toString()).style.boxShadow = '';	
			
			//Show the next one
			document.getElementById('slide' + window.counter.toString()).style.opacity = 1;
			document.getElementById('slide' + window.counter.toString()).style.zIndex = (window.itemNum + 1);
			document.getElementById('idx' + window.counter.toString()).style.background = 'rgba(1, 87, 155, 0.65)';				
			document.getElementById('idx' + window.counter.toString()).style.boxShadow = '0px 0px 3px rgba(1, 87, 155, 0.65)';	
		}
		
		function goSlideKey(evt) {			
			//Go to a slide by pressing the keyboard			
			//Get the keycode
			var k = (evt.which) ? evt.which : evt.keyCode;
			if(k == 39) {				
				//If the right arrow key was pressed go forward
				goSlide(1);				
			} else if(k == 37) {				
				//If the left arrow key was pressed go backward
				goSlide(-1);
			}
		}
		
		function goSlide(idx, jump) {
			//Go to a specific slide (if jump is set) or go to the next/previous slide
			jump = typeof jump !== 'undefined' ? jump : false;
			
			//If the jump variable is set to true
			if(jump == true) {
				//Calculate the index in order to jump to the specific slide
				idx = idx - window.counter;
			}
			
			//Clear the interval
			//window.clearInterval(window.timer);
			//Go to the specific slide
			playSlide(idx);
			//Reset the interval
			//window.timer = setInterval(playSlide, window.interval);
		}
		
		function playback(bool) {
			//Function to pause/play the slider			
			//Get the playback element (the pause icon)
			var obj = document.getElementById('playback');
			
			//If the boolean value is true
			if(bool==true) {
				console.log("The window timer on = "+window.timer);
				//Play the slider (reset the interval) and hide the pause icon
				window.timer = setInterval(playSlide, window.interval);	
				//console.log("-->The window timer on = "+window.timer);
				obj.style.opacity = 0;
				obj.style.right = '';
				obj.style.fontSize = '';
				obj.style.width = '';
				obj.style.height = '';					
				obj.style.top = '';					
			} else {
				console.log("The window timer off = "+window.timer);
				//Pause the slider (clear the interval) and show the pause icon
				window.clearInterval(window.timer);	
				//console.log("-->The window timer off = "+window.timer);
				obj.style.opacity = 1;
				obj.style.right = '10px';
				obj.style.fontSize = '18pt';
				obj.style.width = '30px';
				obj.style.height = '30px';
				obj.style.top = '10px';
			}
		}
		
		function appendCSSFile(fileCSS){
			//Append an css file to the html
			var elem = document.createElement('link');
			elem.type = 'text/css';
			elem.rel = 'stylesheet';
			elem.href = fileCSS;	
			document.getElementsByTagName("head")[0].appendChild(elem);			
		}
		
		function getIntro(cont) {
			//Get the intro text from the rss page
			var res = '';
			
			if(cont != '' && maxChars > 0) {
				//Use regex to get the new lines
				var nRegex = /<\/div>[\n\r]*<div>/g;
				var newLine = cont.replace(nRegex, '. ');
				//Get the position of the hr tag if any
				var endPos = newLine.search(/(<hr\/>|<hr \/>|<hr>)/);
				//Regex to eliminate the html tags
				var regex = /(<([^>]+)>)/ig;
				
				//If there is a hr tag
				if(endPos > 0) {    
					//Get the data until the hr
					var intro = newLine.substring(0, endPos);    
					//Clear the html tags
					res = intro.replace(regex, ''); 
				} else {
					//Clear the html tags
					res = newLine.replace(regex, ''); 
				}
				
				//Clear multiple consecutive dots
				res = res.replace(/^[\.\s]+/, '');
				res = res.replace(/(\.\s\.\s)+/g, '');
				res = res.replace(/\.\./g, '');
			  
				//If the data has more characters than the required
				if(res.length > maxChars) {
					//Get the data until the last space before the maximum number of characters
					res = res.substring(0, maxChars);
					res = res.substring(0, res.lastIndexOf(" ")) + '...';
				}
			}
			
			//Return the intro text
			return res;
		}
		
		function getImg(cont) {
			// Retrieve the first image source from the content of the page
			// Use regexp to get the first image tag
			var imgRegexp = /<img.*?\/>/;
			var img1 = imgRegexp.exec(cont);
		  
			if(img1 != null) {
				// Use regexp to get the source of the previously retrieved image tag
				//var srcRegexp = /src=(\S+[^>])/;
				var srcRegexp = /src=[\"\']+([^\"^\']+)/;
				// Re-make the image tag to assure empty style
				//var imgSrc = '<div style="width:'+imgSize+'px;height:'+imgSize+'px;" class="thumbnail"><img ' + srcRegexp.exec(img1) + ' alt="' + title + '" title="' + title + '" style="width:'+imgSize+'px;height:'+imgSize+'px;"/></div>';
				// Get the image source
				var imgSrc = srcRegexp.exec(img1);				
				//var imgSrc = imgSrc[0].replace(/src=/i, '');
				if(typeof imgSrc[1] != 'undefined') {
					imgSrc = imgSrc[1];
				} else {
					imgSrc = '';
				}
				
				// Return the image source
				return imgSrc;
			} else {
				return '';
			}
		}
		
		function startSwipe(evt, nameX, nameY) {
			//Set defaults for the X and Y, if its the first touch or its moving
			nameX = typeof nameX !== 'undefined' ? nameX : 'startX';
			nameY = typeof nameY !== 'undefined' ? nameY : 'startY';
			//Prevent the default action for the swipe movement
			evt.preventDefault();
			//The swipe should be one finger touch
			swipe['fingers'] = evt.touches.length;
			//Ensure that only one finger is touching the screen
			if(swipe['fingers'] == 1) {
				//Get the x y coordinates of the touch
				swipe[nameX] = evt.touches[0].pageX;
				swipe[nameY] = evt.touches[0].pageY;
			} else {
				//Cancel the touch
				cancelSwipe();					
			}
		}
		
		function endSwipe(evt) {				
			//Prevent the default action for the swipe movement
			evt.preventDefault();
			
			//Ensure that only one finger is touching the screen
			if(swipe['fingers'] == 1) {
				//Calculate the length in X and Y coordinates
				var lengthX = swipe['X'] - swipe['startX'];
				var lengthY = swipe['Y'] - swipe['startY'];
				//Calculate the length of the swipe
				var swipeLength = Math.round(Math.sqrt(Math.pow(lengthX,2) + Math.pow(lengthY,2)));
				//Continue if the user swiped more than the minimum length
				if(swipeLength >= swipeMinLength) {
					//Calculate the length in radians
					var angle = Math.atan2(lengthY, lengthX);
					
					if(Math.abs(angle) <= (Math.PI / 2)) {
						goSlide(1);						
					} else {
						goSlide(-1);						
					}
				}
			}
			
			//Reset the swipe
			cancelSwipe();
		}
		
		function cancelSwipe() {
			//Reset the swipe data
			for(var prop in swipe) {
				if(swipe.hasOwnProperty(prop)) {
					prop = 0;
				}
			}
		}
		
		gadgets.util.registerOnLoadHandler(getHtml);
	</script>
</html>]]>
  </Content>
</Module>
